#!/usr/bin/env node

/**
 * Comprehensive PDF Processing Diagnostics
 * 
 * This script diagnoses all issues with PDF processing:
 * 1. Embeddings generation status
 * 2. Image extraction status
 * 3. Product generation limits
 * 4. MIVAA service communication
 * 5. Database storage verification
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL || 'https://bgbavxtjlbvgplozizxu.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå Error: SUPABASE_SERVICE_ROLE_KEY environment variable is required');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

const log = (message, color = 'white') => {
  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
  };
  console.log(`${colors[color]}${message}\x1b[0m`);
};

async function runDiagnostics() {
  log('\nüîç COMPREHENSIVE PDF PROCESSING DIAGNOSTICS\n', 'cyan');

  try {
    // ============ 1. EMBEDDINGS ANALYSIS ============
    log('üìä 1. EMBEDDINGS ANALYSIS', 'blue');
    log('='.repeat(80), 'blue');

    const { data: chunks, count: chunksCount } = await supabase
      .from('document_chunks')
      .select('id, document_id', { count: 'exact' })
      .limit(1);

    const { count: embeddingsCount } = await supabase
      .from('document_vectors')
      .select('id', { count: 'exact' });

    log(`   Chunks in database: ${chunksCount || 0}`);
    log(`   Embeddings in database: ${embeddingsCount || 0}`);

    if (chunksCount && embeddingsCount === 0) {
      log(`   ‚ö†Ô∏è  ISSUE: ${chunksCount} chunks but 0 embeddings!`, 'yellow');
      log(`   This means embeddings are NOT being generated by MIVAA`, 'yellow');
    } else if (embeddingsCount && embeddingsCount > 0) {
      log(`   ‚úÖ Embeddings exist: ${embeddingsCount}`, 'green');
    }

    // ============ 2. IMAGE EXTRACTION ANALYSIS ============
    log('\nüñºÔ∏è  2. IMAGE EXTRACTION ANALYSIS', 'blue');
    log('='.repeat(80), 'blue');

    const { count: imagesCount } = await supabase
      .from('document_images')
      .select('id', { count: 'exact' });

    log(`   Images in database: ${imagesCount || 0}`);

    if (imagesCount === 0 && chunksCount && chunksCount > 0) {
      log(`   ‚ö†Ô∏è  ISSUE: ${chunksCount} chunks but 0 images!`, 'yellow');
      log(`   This means image extraction is NOT working in MIVAA`, 'yellow');
    }

    // ============ 3. PRODUCT GENERATION ANALYSIS ============
    log('\nüì¶ 3. PRODUCT GENERATION ANALYSIS', 'blue');
    log('='.repeat(80), 'blue');

    const { count: productsCount } = await supabase
      .from('products')
      .select('id', { count: 'exact' });

    log(`   Products in database: ${productsCount || 0}`);
    log(`   Chunks available: ${chunksCount || 0}`);

    if (productsCount && chunksCount) {
      const ratio = (productsCount / chunksCount * 100).toFixed(2);
      log(`   Product-to-chunk ratio: ${ratio}%`);
      
      if (productsCount < chunksCount / 10) {
        log(`   ‚ö†Ô∏è  ISSUE: Only ${ratio}% of chunks converted to products!`, 'yellow');
        log(`   Default limit is 5 products per document`, 'yellow');
      }
    }

    // ============ 4. DOCUMENT PROCESSING STATUS ============
    log('\nüìÑ 4. DOCUMENT PROCESSING STATUS', 'blue');
    log('='.repeat(80), 'blue');

    const { data: documents } = await supabase
      .from('documents')
      .select('id, filename, status, created_at')
      .order('created_at', { ascending: false })
      .limit(5);

    if (documents && documents.length > 0) {
      log(`   Recent documents:`, 'green');
      documents.forEach((doc, i) => {
        log(`   ${i + 1}. ${doc.filename} - Status: ${doc.status}`);
      });
    }

    // ============ 5. CHUNK QUALITY ANALYSIS ============
    log('\n‚≠ê 5. CHUNK QUALITY ANALYSIS', 'blue');
    log('='.repeat(80), 'blue');

    const { data: sampleChunks } = await supabase
      .from('document_chunks')
      .select('id, content, metadata')
      .limit(3);

    if (sampleChunks && sampleChunks.length > 0) {
      log(`   Sample chunks found: ${sampleChunks.length}`, 'green');
      sampleChunks.forEach((chunk, i) => {
        const contentLength = chunk.content?.length || 0;
        log(`   Chunk ${i + 1}: ${contentLength} characters`);
      });
    }

    // ============ 6. SUMMARY & RECOMMENDATIONS ============
    log('\nüìã 6. SUMMARY & RECOMMENDATIONS', 'magenta');
    log('='.repeat(80), 'magenta');

    const issues = [];

    if (chunksCount && embeddingsCount === 0) {
      issues.push('‚ùå Embeddings not being generated');
    }
    if (imagesCount === 0 && chunksCount && chunksCount > 0) {
      issues.push('‚ùå Images not being extracted');
    }
    if (productsCount && productsCount < chunksCount / 10) {
      issues.push('‚ùå Product generation limited to 5 per document');
    }

    if (issues.length === 0) {
      log('‚úÖ All systems operational!', 'green');
    } else {
      log('Issues found:', 'red');
      issues.forEach(issue => log(`   ${issue}`, 'red'));
    }

    log('\nüîß NEXT STEPS:', 'cyan');
    log('   1. Check MIVAA service logs for embedding generation errors', 'cyan');
    log('   2. Verify OPENAI_API_KEY is set in MIVAA environment', 'cyan');
    log('   3. Check PDF processor for image extraction failures', 'cyan');
    log('   4. Increase maxProducts limit in consolidatedPDFWorkflowService.ts', 'cyan');
    log('   5. Add monitoring dashboard to track all metrics', 'cyan');

  } catch (error) {
    log(`‚ùå Diagnostic error: ${error.message}`, 'red');
    process.exit(1);
  }
}

runDiagnostics();

