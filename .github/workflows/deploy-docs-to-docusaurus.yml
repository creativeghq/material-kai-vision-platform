name: üìö Deploy Documentation to Docusaurus

on:
  push:
    branches: [main, master]
    paths:
      - 'docs/**'
      - '.github/workflows/deploy-docs-to-docusaurus.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no docs changes'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  actions: read
  pull-requests: write

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_changes.outputs.should_run }}
    steps:
      - name: üîß Check for changes in docs folder
        id: check_changes
        run: |
          # Always run for manual triggers or force deploy
          if [ "${{ github.event.inputs.force_deploy }}" == "true" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger or force deploy - will proceed with deployment"
            echo "should_run=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For push events, always run (since we have path filters in the workflow trigger)
          echo "Push event detected - will proceed with deployment"
          echo "should_run=true" >> $GITHUB_OUTPUT

  deploy-docs:
    needs: check_changes
    if: needs.check_changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üîç Checkout Material Kai Vision Platform
        uses: actions/checkout@v4

      - name: üìã Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: üßπ Create directory structure
        run: |
          mkdir -p docs-temp/docs
          mkdir -p docs-temp/build

      - name: üìö Create Docusaurus project
        run: |
          echo "üìö Creating Docusaurus project..."

          # Create a basic Docusaurus project structure
          npx create-docusaurus@latest docs-temp/docusaurus classic --typescript

          # Remove default docs and copy our documentation
          rm -rf docs-temp/docusaurus/docs/*
          cp -r docs/* docs-temp/docusaurus/docs/

          # Create a basic docusaurus.config.js
          cat > docs-temp/docusaurus/docusaurus.config.js << 'EOF'
          const config = {
            title: 'Material Kai Vision Platform',
            tagline: 'AI-powered material intelligence system',
            favicon: 'img/favicon.ico',
            url: 'https://basilakis.github.io',
            baseUrl: '/',
            organizationName: 'Basilakis',
            projectName: 'basilakis.github.io',
            onBrokenLinks: 'throw',
            onBrokenMarkdownLinks: 'warn',
            i18n: {
              defaultLocale: 'en',
              locales: ['en'],
            },
            presets: [
              [
                'classic',
                {
                  docs: {
                    sidebarPath: require.resolve('./sidebars.js'),
                    routeBasePath: '/',
                  },
                  blog: false,
                  theme: {
                    customCss: require.resolve('./src/css/custom.css'),
                  },
                },
              ],
            ],
            themeConfig: {
              navbar: {
                title: 'Material Kai Vision Platform',
                items: [
                  {
                    type: 'docSidebar',
                    sidebarId: 'tutorialSidebar',
                    position: 'left',
                    label: 'Documentation',
                  },
                ],
              },
              footer: {
                style: 'dark',
                copyright: `Copyright ¬© ${new Date().getFullYear()} Material Kai Vision Platform.`,
              },
            },
          };
          module.exports = config;
          EOF

          echo "‚úÖ Docusaurus project created"

      - name: üîç Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: Basilakis/basilakis.github.io
          token: ${{ secrets.GH_TOKEN }}
          path: target-repo

      - name: üì¶ Install GitHub CLI
        run: |
          echo "Installing GitHub CLI..."
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: üèóÔ∏è Build Docusaurus site
        run: |
          echo "üèóÔ∏è Building Docusaurus site..."
          cd docs-temp/docusaurus
          npm install
          npm run build
          echo "‚úÖ Docusaurus build completed"

      - name: üöÄ Create Pull Request
        run: |
          # Generate a unique branch name
          BRANCH_NAME="docs-update-$(date +%Y%m%d%H%M%S)"
          echo "Branch name: $BRANCH_NAME"

          # Create a new branch for the changes
          cd target-repo
          git checkout -b $BRANCH_NAME

          # Copy the built files
          echo "Removing existing files..."
          rm -rf * || true

          echo "Copying built Docusaurus site..."
          cp -r ../docs-temp/docusaurus/build/* .

          echo "Contents after copying:"
          ls -la

          # Commit the changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          echo "Adding files to git..."
          git add .

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit - documentation is already up to date"
            exit 0
          fi

          echo "Committing changes..."
          git commit -m "Deploy Documentation: ${{ github.event.head_commit.message }}"

          echo "Pushing branch..."
          git push origin $BRANCH_NAME

          echo "Creating pull request..."

          # Create a pull request using GitHub CLI
          gh auth login --with-token <<< "${{ secrets.GH_TOKEN }}"

          # Try to create PR targeting gh-pages branch (where GitHub Pages serves from)
          if ! gh pr create \
            --title "Deploy Documentation: ${{ github.event.head_commit.message }}" \
            --body "This PR was automatically created by the GitHub Actions workflow to update the documentation site. Changes include updates from the Material Kai Vision Platform repository (commit: ${{ github.sha }})." \
            --repo Basilakis/basilakis.github.io \
            --head $BRANCH_NAME \
            --base gh-pages; then
            echo "‚ùå Failed to create PR automatically"
            echo "üîó Create PR manually at: https://github.com/Basilakis/basilakis.github.io/compare/gh-pages...$BRANCH_NAME"
          else
            echo "‚úÖ Pull request created successfully"
          fi