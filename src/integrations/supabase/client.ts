// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

// import type { Database } from './types'; // Currently unused

// Environment variables for Supabase configuration
// These should be set in your deployment environment (GitHub Secrets, Vercel Environment Variables, or Supabase)
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = process.env.SUPABASE_ANON_KEY;

// Use placeholder values during build time if environment variables are not available
// This allows the build to complete, but the client will fail at runtime if not configured
const isBuildTime = typeof window === 'undefined' && !SUPABASE_URL;
const url = SUPABASE_URL || 'https://placeholder.supabase.co';
const key = SUPABASE_PUBLISHABLE_KEY || 'placeholder-key';

// Validate required environment variables at runtime (not build time)
function validateEnvironment() {
  if (!SUPABASE_URL) {
    throw new Error(
      'Missing SUPABASE_URL environment variable. ' +
      'Please set this in your deployment environment (GitHub Secrets, Vercel Environment Variables, or Supabase).',
    );
  }

  if (!SUPABASE_PUBLISHABLE_KEY) {
    throw new Error(
      'Missing SUPABASE_ANON_KEY environment variable. ' +
      'Please set this in your deployment environment (GitHub Secrets, Vercel Environment Variables, or Supabase).',
    );
  }
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient(url, key, {
  auth: {
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false, // Optimize for SPA
    flowType: 'pkce', // Use PKCE flow for better security
  },
  global: {
    headers: {
      // Removed cache-control header to avoid CORS issues with Edge Functions
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    // Only enable realtime when needed
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Validate environment only at runtime (when window is defined)
if (typeof window !== 'undefined' && !isBuildTime) {
  validateEnvironment();
}
